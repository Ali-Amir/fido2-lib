const {
    Fido2Lib
} = require("../index.js");
var assert = require("chai").assert;
var h = require("fido2-helpers");

describe("Fido2Lib", function() {
    it("can create FIDO server object", function() {
        var fs = new Fido2Lib({
            serverDomain: "example.com"
        });
        assert(fs);
        assert.isFunction(fs.getAttestationChallenge);
        assert.isFunction(fs.makeCredentialResponse);
        assert.isFunction(fs.getAssertionChallenge);
        assert.isFunction(fs.getAssertionResponse);
    });
    it("needs to check all the variations of options");
    it("can create a server with blacklist");
    it("can create server with crypto parameters");
    it("can create server with timeout");
    it("can create server with crypto size");
    it("can set rpid");
    it("sets default timeout values");
    it("sets default crypto params");
    it("sets default challenge size");
});

describe.only("getAttestationChallenge", function() {
    var serv;
    beforeEach(function() {
        serv = new Fido2Lib({
            serverDomain: "example.com"
        });
    });

    it("returns a challenge", function() {
        return serv.getAttestationChallenge().then((chal) => {
            assert.isString(chal.rp.id);
            assert.strictEqual(chal.rp.id, "example.com");
            assert.isString(chal.rp.name);
            assert.strictEqual(chal.rp.name, "example.com");
            assert.isNumber(chal.timeout);
            assert.strictEqual(chal.timeout, 60000);
            assert.strictEqual(chal.challenge.length, 64);
        });
    });
    it("returns the right challenge based on options set in the constructor");
});

describe("makeCredentialResponse", function() {
    var serv;
    beforeEach(function() {
        serv = new Fido2Lib({
            serverDomain: "example.com"
        });
    });

    it("creates a credential", function() {
        return serv.makeCredentialResponse(h.makeCredentialSelfAttestationResponse).then((resp) => {
            console.log(resp);
        });
    });

    it("catches bad requests");
    it.skip("validates a signature", function() {
        // var clientDataHash = new Uint8Array([
        //     0x7C, 0xA8, 0xE7, 0x52, 0x7A, 0x68, 0xF3, 0x03, 0x4F, 0xB8, 0xD3, 0x80, 0xC8, 0x72, 0x6B, 0xCD,
        //     0xE8, 0xEF, 0x25, 0xB8, 0x61, 0x09, 0x96, 0xCC, 0x49, 0x2E, 0xB7, 0xAA, 0x7B, 0x42, 0xDB, 0x44
        //     ]);
        var authnrData = new Uint8Array([
            0x49, 0x96, 0x0D, 0xE5, 0x88, 0x0E, 0x8C, 0x68, 0x74, 0x34, 0x17, 0x0F, 0x64, 0x76, 0x60, 0x5B,
            0x8F, 0xE4, 0xAE, 0xB9, 0xA2, 0x86, 0x32, 0xC7, 0x99, 0x5C, 0xF3, 0xBA, 0x83, 0x1D, 0x97, 0x63,
            0x41, 0x00, 0x00, 0x00, 0x01, 0xF1, 0xD0, 0xF1, 0xD0, 0xF1, 0xD0, 0xF1, 0xD0, 0xF1, 0xD0, 0xF1,
            0xD0, 0xF1, 0xD0, 0xF1, 0xD0, 0x00, 0x20, 0x42, 0x4E, 0x2D, 0x47, 0xBB, 0x9A, 0xA3, 0x7B, 0x48,
            0x4E, 0xE9, 0x97, 0x39, 0xDE, 0x84, 0xCA, 0x5F, 0x7A, 0x87, 0xFA, 0x8A, 0xF7, 0xD4, 0x0D, 0xF0,
            0x2C, 0x23, 0x85, 0xF8, 0xE1, 0x40, 0x54, 0xA3, 0x63, 0x61, 0x6C, 0x67, 0x65, 0x52, 0x53, 0x32,
            0x35, 0x36, 0x61, 0x6E, 0x59, 0x01, 0x00, 0xBD, 0x50, 0xCB, 0xB3, 0x10, 0x4D, 0xD4, 0x3D, 0x2C,
            0x3F, 0xE3, 0x05, 0x19, 0xC4, 0xF8, 0xBC, 0xDC, 0x33, 0xF4, 0x78, 0x52, 0x61, 0xF4, 0xE7, 0x9E,
            0x44, 0x01, 0x4E, 0x3F, 0x13, 0xB5, 0x15, 0xAC, 0x68, 0x5B, 0x92, 0x8D, 0x0E, 0x5D, 0x32, 0xD6,
            0xD2, 0x91, 0xB8, 0x40, 0xF7, 0xD6, 0x82, 0x52, 0xE6, 0xE7, 0xC3, 0x0A, 0xF2, 0xBC, 0x13, 0x56,
            0x6F, 0x95, 0x2A, 0x8B, 0x06, 0x70, 0x01, 0x1C, 0xDF, 0x70, 0x24, 0x69, 0x06, 0xE2, 0xA0, 0xD1,
            0x34, 0x2C, 0x71, 0x60, 0x98, 0x5A, 0xEA, 0x0D, 0x83, 0x96, 0xC1, 0x58, 0x33, 0x89, 0x8E, 0x9A,
            0x14, 0x94, 0xD5, 0xC6, 0x44, 0x21, 0xC4, 0xBB, 0xA4, 0x0B, 0xAF, 0xFD, 0x02, 0x68, 0x67, 0x24,
            0x4A, 0xE6, 0xDE, 0x3D, 0xEB, 0x98, 0x44, 0xF3, 0xB0, 0xB1, 0x96, 0xF8, 0x15, 0xB4, 0x96, 0x0B,
            0xBD, 0x28, 0xE0, 0x29, 0x6B, 0xB1, 0x09, 0xF0, 0xE6, 0x24, 0x61, 0xD8, 0x24, 0xF1, 0xA4, 0x02,
            0x21, 0xBD, 0xEF, 0xF3, 0xF1, 0xD2, 0xCC, 0xBF, 0x59, 0x38, 0xC1, 0x74, 0xF2, 0x3F, 0x73, 0xBD,
            0x84, 0x26, 0x42, 0x48, 0x83, 0x67, 0xAB, 0x73, 0x6D, 0x0C, 0xD0, 0x5E, 0xB0, 0x84, 0x99, 0x47,
            0x39, 0xE7, 0x99, 0x59, 0x8C, 0xED, 0x6F, 0x19, 0x9D, 0x3D, 0x6C, 0xA5, 0x1A, 0xBA, 0xF6, 0x71,
            0xE9, 0x68, 0xAE, 0x73, 0x28, 0x7D, 0x3B, 0x70, 0x98, 0xE5, 0xA3, 0x81, 0xAB, 0x25, 0x5C, 0xA0,
            0x57, 0x46, 0xEF, 0x02, 0xDD, 0xF2, 0x75, 0x22, 0xF8, 0xD0, 0x96, 0x26, 0xF8, 0x8C, 0x89, 0xD1,
            0x69, 0x4C, 0xF1, 0xCC, 0xBA, 0x2C, 0x62, 0x75, 0xEC, 0x68, 0x42, 0xF5, 0xC6, 0x78, 0xA1, 0x01,
            0x9B, 0xA7, 0xF8, 0x42, 0x6D, 0x35, 0x5C, 0x1B, 0xEA, 0x5B, 0x7B, 0x8C, 0x90, 0x73, 0xC8, 0x05,
            0xE2, 0x48, 0xCE, 0x00, 0x56, 0xDB, 0x5B, 0x61, 0x65, 0x43, 0x01, 0x00, 0x01
        ]);
        var e = new Uint8Array([
            0x01, 0x00, 0x01
        ]);
        var n = new Uint8Array([
            0xBD, 0x50, 0xCB, 0xB3, 0x10, 0x4D, 0xD4, 0x3D, 0x2C, 0x3F, 0xE3, 0x05, 0x19, 0xC4, 0xF8, 0xBC,
            0xDC, 0x33, 0xF4, 0x78, 0x52, 0x61, 0xF4, 0xE7, 0x9E, 0x44, 0x01, 0x4E, 0x3F, 0x13, 0xB5, 0x15,
            0xAC, 0x68, 0x5B, 0x92, 0x8D, 0x0E, 0x5D, 0x32, 0xD6, 0xD2, 0x91, 0xB8, 0x40, 0xF7, 0xD6, 0x82,
            0x52, 0xE6, 0xE7, 0xC3, 0x0A, 0xF2, 0xBC, 0x13, 0x56, 0x6F, 0x95, 0x2A, 0x8B, 0x06, 0x70, 0x01,
            0x1C, 0xDF, 0x70, 0x24, 0x69, 0x06, 0xE2, 0xA0, 0xD1, 0x34, 0x2C, 0x71, 0x60, 0x98, 0x5A, 0xEA,
            0x0D, 0x83, 0x96, 0xC1, 0x58, 0x33, 0x89, 0x8E, 0x9A, 0x14, 0x94, 0xD5, 0xC6, 0x44, 0x21, 0xC4,
            0xBB, 0xA4, 0x0B, 0xAF, 0xFD, 0x02, 0x68, 0x67, 0x24, 0x4A, 0xE6, 0xDE, 0x3D, 0xEB, 0x98, 0x44,
            0xF3, 0xB0, 0xB1, 0x96, 0xF8, 0x15, 0xB4, 0x96, 0x0B, 0xBD, 0x28, 0xE0, 0x29, 0x6B, 0xB1, 0x09,
            0xF0, 0xE6, 0x24, 0x61, 0xD8, 0x24, 0xF1, 0xA4, 0x02, 0x21, 0xBD, 0xEF, 0xF3, 0xF1, 0xD2, 0xCC,
            0xBF, 0x59, 0x38, 0xC1, 0x74, 0xF2, 0x3F, 0x73, 0xBD, 0x84, 0x26, 0x42, 0x48, 0x83, 0x67, 0xAB,
            0x73, 0x6D, 0x0C, 0xD0, 0x5E, 0xB0, 0x84, 0x99, 0x47, 0x39, 0xE7, 0x99, 0x59, 0x8C, 0xED, 0x6F,
            0x19, 0x9D, 0x3D, 0x6C, 0xA5, 0x1A, 0xBA, 0xF6, 0x71, 0xE9, 0x68, 0xAE, 0x73, 0x28, 0x7D, 0x3B,
            0x70, 0x98, 0xE5, 0xA3, 0x81, 0xAB, 0x25, 0x5C, 0xA0, 0x57, 0x46, 0xEF, 0x02, 0xDD, 0xF2, 0x75,
            0x22, 0xF8, 0xD0, 0x96, 0x26, 0xF8, 0x8C, 0x89, 0xD1, 0x69, 0x4C, 0xF1, 0xCC, 0xBA, 0x2C, 0x62,
            0x75, 0xEC, 0x68, 0x42, 0xF5, 0xC6, 0x78, 0xA1, 0x01, 0x9B, 0xA7, 0xF8, 0x42, 0x6D, 0x35, 0x5C,
            0x1B, 0xEA, 0x5B, 0x7B, 0x8C, 0x90, 0x73, 0xC8, 0x05, 0xE2, 0x48, 0xCE, 0x00, 0x56, 0xDB, 0x5B,
        ]);
        var sig = new Uint8Array([
            0x0B, 0xB5, 0x63, 0x86, 0xE1, 0x4B, 0x44, 0xB6, 0xD1, 0x34, 0x47, 0xE5, 0xD2, 0x87, 0xEB, 0x80,
            0xB6, 0xAD, 0x47, 0x3A, 0xFB, 0x9C, 0xB1, 0x10, 0x2F, 0xED, 0x87, 0x67, 0xD5, 0x77, 0xF0, 0x8A,
            0xAA, 0x92, 0x92, 0x53, 0xFE, 0x01, 0xBC, 0x9E, 0x16, 0xE0, 0xE4, 0xC5, 0x12, 0x1D, 0x5A, 0x96,
            0x62, 0xF2, 0x89, 0xEB, 0xB4, 0xEB, 0xBD, 0xED, 0x28, 0x1F, 0xEE, 0x93, 0xB0, 0xCF, 0x6F, 0xB8,
            0x65, 0x20, 0xC4, 0x00, 0xEF, 0xF6, 0x22, 0xCC, 0x02, 0x00, 0x26, 0x97, 0x04, 0xFE, 0x91, 0x8E,
            0x53, 0x4B, 0x38, 0x82, 0xC2, 0x82, 0x70, 0xE9, 0xB3, 0xDF, 0x2B, 0xE4, 0x75, 0xF9, 0x29, 0x14,
            0x3A, 0xBC, 0x3B, 0xD3, 0xB7, 0xE1, 0xF2, 0xE9, 0xD4, 0x16, 0x1B, 0xA1, 0x48, 0x81, 0x57, 0x59,
            0xE8, 0xC0, 0xFE, 0x18, 0xC4, 0x85, 0x3C, 0x09, 0x29, 0x04, 0x2B, 0x66, 0x6B, 0x82, 0xC5, 0x0D,
            0xF7, 0x97, 0x3F, 0x2E, 0x6A, 0x61, 0x78, 0x44, 0x0D, 0xBC, 0x75, 0x19, 0x95, 0x1C, 0x4E, 0x47,
            0x33, 0x44, 0xB4, 0x70, 0x4F, 0x94, 0xFE, 0xAD, 0x77, 0xAD, 0x84, 0xF5, 0x16, 0xD0, 0x93, 0xEE,
            0x41, 0xA5, 0x4A, 0xEA, 0x15, 0x70, 0xCF, 0x2F, 0x09, 0x05, 0x83, 0x65, 0x2A, 0x1A, 0xA2, 0x76,
            0xD6, 0xBD, 0x1F, 0xC6, 0xD6, 0x18, 0x00, 0xE5, 0x2B, 0x75, 0x48, 0x8F, 0xD9, 0x07, 0xD5, 0xA9,
            0xEC, 0x0D, 0x31, 0x35, 0x23, 0xC4, 0x3D, 0xFA, 0x98, 0x16, 0x1D, 0x87, 0xF5, 0xC7, 0xCB, 0xC1,
            0xB0, 0x14, 0x0C, 0x55, 0xDE, 0x05, 0xFA, 0xF0, 0xA7, 0x6C, 0xDC, 0x24, 0x8A, 0xBB, 0xC9, 0x11,
            0xBC, 0x23, 0xE7, 0x0A, 0x12, 0x72, 0x0C, 0x06, 0x8E, 0x3D, 0x95, 0x8D, 0x95, 0x7D, 0x47, 0x28,
            0x33, 0x59, 0xD6, 0xE8, 0x21, 0x7B, 0xE1, 0xEF, 0x9C, 0x0D, 0x7F, 0x04, 0x73, 0x63, 0xA5, 0x8D,
        ]);

        var jwk2pem = require('pem-jwk').jwk2pem;
        var jwk = {};
        jwk.alg = "RS256";
        jwk.kty = "RSA";
        jwk.n = n;
        jwk.e = e;
        var pem = jwk2pem(jwk);

        var fs = new Fido2Lib({
            serverDomain: "example.com"
        });

        var ret = fs.validateSignature(sig, "RS256", pem, authnrData.buffer, Buffer.from(h.clientDataJsonBuf));
        assert(ret, "expected signature to pass");
    });
});

describe("getAssertionChallenge", function() {
    it("generates a challenge");
    it.skip("validates an assertion response", function() {
        var fs = new Fido2Lib({
            serverDomain: "example.com"
        });
        var res = {
            credential: {
                id: h.credentialId,
                type: "ScopedCred"
            },
            clientDataJSON: h.clientDataJsonBuf,
            authenticatorData: h.assertionAuthenticatorData,
            signature: h.assertionSignature
        };

        var attObj = {
            alg: "RS256",
            n: h.rsaPublicKey,
            e: h.rsaExp
        };
        var pem = fs.attestationDataToPem(attObj);
        console.log(pem);

        var userData = {
            publicKeyPem: pem,
            challengeBuf: h.challengeBuf,
            counter: 0
        };

        var rpData = {
            origin: h.origin,
            rpId: "localhost"
        };

        return fs.getAssertionResponse(res, h.challengeBuf, pem, h.origin, 0);
    });
});
// describe ("getAssertionResponse");


describe("test", function() {
    var n = new Uint8Array([
        0xA4, 0x43, 0x09, 0x38, 0xB0, 0xB9, 0x04, 0x39, 0xD6, 0xED, 0xBE, 0x1D, 0x85, 0x18, 0x14, 0x64,
        0xD0, 0xBC, 0xC8, 0xA4, 0xC0, 0xD9, 0xBB, 0xB2, 0xF5, 0x14, 0x9B, 0x70, 0xEF, 0x8F, 0x46, 0xB0,
        0xDD, 0x3A, 0x97, 0x1C, 0x8D, 0x4D, 0xAD, 0x19, 0x3F, 0x77, 0x61, 0x33, 0x97, 0x1B, 0x54, 0x76,
        0xA5, 0xD2, 0xBB, 0xBA, 0x35, 0x42, 0xCD, 0xB7, 0x2D, 0x68, 0xD7, 0x08, 0x21, 0x00, 0x88, 0x13,
        0x76, 0x84, 0x5F, 0xA1, 0x02, 0x18, 0xE2, 0xA1, 0x6A, 0xF3, 0xEF, 0x5E, 0x7F, 0xF7, 0x08, 0x54,
        0xDD, 0x8B, 0xD4, 0x7F, 0x9C, 0x37, 0x20, 0x63, 0xAB, 0xEE, 0x4D, 0x39, 0x52, 0x93, 0xA5, 0x45,
        0xB3, 0x82, 0xDC, 0x2C, 0xDB, 0xA5, 0xF9, 0x71, 0xFE, 0x38, 0xBA, 0x35, 0x3C, 0x7C, 0x46, 0xBD,
        0xBD, 0xF6, 0x64, 0xC1, 0x69, 0xDA, 0x5F, 0xD8, 0xE5, 0x06, 0x30, 0xBC, 0x87, 0x2B, 0x4F, 0xE9,
        0x30, 0xBC, 0x17, 0xF2, 0x2A, 0xC5, 0x4E, 0x83, 0xAD, 0x92, 0x7D, 0x0E, 0x87, 0x1A, 0x68, 0x73,
        0x5E, 0xFE, 0xD8, 0xEC, 0x66, 0x53, 0xC7, 0x85, 0xCE, 0xB5, 0x93, 0xAE, 0x2B, 0x3C, 0x70, 0x77,
        0xDA, 0x72, 0x16, 0x85, 0x7D, 0xA0, 0xA5, 0x09, 0x4A, 0x21, 0xD9, 0xF4, 0x12, 0x3B, 0x1A, 0xC0,
        0x0C, 0x11, 0x53, 0x6A, 0x2F, 0xAA, 0x01, 0x36, 0xCA, 0x17, 0x6A, 0x11, 0xB2, 0xD3, 0xDC, 0xF6,
        0xC8, 0x9C, 0x00, 0x57, 0x2B, 0x8D, 0xE6, 0x40, 0xE7, 0x69, 0x03, 0xCC, 0x25, 0x4E, 0x36, 0x0B,
        0x76, 0xF1, 0x62, 0xB8, 0x5C, 0x2E, 0x21, 0xAA, 0x44, 0x47, 0x29, 0x17, 0x2E, 0x1B, 0x9B, 0x47,
        0x2F, 0x4C, 0xBA, 0xCA, 0x24, 0x9F, 0xAC, 0xD6, 0x56, 0x11, 0xFB, 0xC4, 0x96, 0xBB, 0x2D, 0x82,
        0x27, 0x1F, 0xA0, 0xF1, 0x5D, 0x69, 0x69, 0x07, 0xC6, 0xCC, 0x03, 0x68, 0xD8, 0xCB, 0x53, 0x63,
    ]).buffer;
    var e = new Uint8Array([0x01, 0x00, 0x01]).buffer;

    // attestation
    // var sigBuf = new Uint8Array([
    //     0XC8, 0X58, 0X68, 0XD3, 0X83, 0XF9, 0XF6, 0X22, 0X65, 0X70, 0XBE, 0XE8, 0X9A, 0X8F, 0X3A, 0X97,
    //     0X19, 0XAF, 0X76, 0X6D, 0XD0, 0X62, 0XFB, 0XF4, 0XF1, 0X54, 0X64, 0XED, 0X5C, 0X09, 0XE4, 0XD4,
    //     0XE3, 0X5F, 0X7F, 0X9A, 0X18, 0X4B, 0XFD, 0X4C, 0X73, 0XED, 0X13, 0X02, 0X40, 0X8D, 0X35, 0XCE,
    //     0XF6, 0X10, 0XBF, 0X62, 0XCA, 0X3A, 0X0B, 0X73, 0X17, 0X28, 0X3D, 0X06, 0X18, 0X3C, 0X01, 0X7A,
    //     0XE7, 0XFC, 0X34, 0XCC, 0X54, 0X6E, 0X96, 0X1A, 0XE8, 0X31, 0XDE, 0X1C, 0XB2, 0X14, 0XF5, 0X9C,
    //     0XA5, 0X07, 0XBB, 0XC0, 0X77, 0X47, 0X07, 0XC9, 0X7B, 0XCA, 0X8E, 0X5D, 0X8D, 0XFA, 0XE8, 0XAD,
    //     0X0D, 0X78, 0XCA, 0X7F, 0X07, 0X4A, 0X26, 0X16, 0XB8, 0XAE, 0X6D, 0XFF, 0XEC, 0XF6, 0X94, 0X75,
    //     0X2B, 0X4B, 0X77, 0X90, 0XE7, 0XD3, 0X4F, 0XBC, 0XB1, 0XCE, 0X13, 0X3D, 0X39, 0X89, 0X06, 0XCB,
    //     0X1D, 0X53, 0X23, 0XE1, 0XBD, 0XC7, 0XAD, 0XFF, 0XB0, 0X16, 0X40, 0X61, 0XF7, 0XC1, 0XDC, 0X03,
    //     0XED, 0X68, 0X69, 0XFF, 0X16, 0XBF, 0X65, 0X65, 0XB1, 0X8D, 0X14, 0X7A, 0XE9, 0X57, 0X1F, 0XA6,
    //     0X22, 0X31, 0X6D, 0X19, 0XCF, 0XD7, 0X03, 0X6D, 0X28, 0XEF, 0X32, 0XF2, 0X77, 0X7D, 0XE8, 0X1C,
    //     0X4F, 0X08, 0X40, 0X7B, 0XA3, 0X3E, 0XD2, 0X87, 0X35, 0X24, 0X41, 0X87, 0X3F, 0XCC, 0X44, 0X4B,
    //     0X54, 0X09, 0XE8, 0XF1, 0X30, 0X05, 0X65, 0X74, 0X08, 0X3A, 0X4F, 0X69, 0XB9, 0XE2, 0X21, 0X75,
    //     0XEE, 0XFD, 0X3A, 0XFD, 0X14, 0X6C, 0X7D, 0XFC, 0XDF, 0X9E, 0X2E, 0X7A, 0X13, 0XCF, 0X9F, 0X3D,
    //     0X37, 0XF2, 0XAA, 0XE5, 0X22, 0XB2, 0X26, 0X61, 0X3C, 0X26, 0X91, 0X71, 0XB4, 0X48, 0X7A, 0X9F,
    //     0X90, 0X70, 0X1A, 0X10, 0X8C, 0X1F, 0X3D, 0X20, 0X21, 0XFF, 0X32, 0X0B, 0XE8, 0X13, 0X80, 0XE2
    //     ]).buffer;
    // var authnrData = new Uint8Array([
    //     0x49, 0x96, 0x0D, 0xE5, 0x88, 0x0E, 0x8C, 0x68, 0x74, 0x34, 0x17, 0x0F, 0x64, 0x76, 0x60, 0x5B,
    //     0x8F, 0xE4, 0xAE, 0xB9, 0xA2, 0x86, 0x32, 0xC7, 0x99, 0x5C, 0xF3, 0xBA, 0x83, 0x1D, 0x97, 0x63,
    //     0x41, 0x00, 0x00, 0x00, 0x01, 0xF1, 0xD0, 0xF1, 0xD0, 0xF1, 0xD0, 0xF1, 0xD0, 0xF1, 0xD0, 0xF1,
    //     0xD0, 0xF1, 0xD0, 0xF1, 0xD0, 0x00, 0x20, 0xB8, 0xDB, 0xBB, 0x83, 0xAE, 0x2D, 0x07, 0xBC, 0xEF,
    //     0xEE, 0x3A, 0x09, 0x98, 0x70, 0xC1, 0xB3, 0x7E, 0xA4, 0xBB, 0x96, 0x6C, 0xD1, 0xEA, 0x18, 0xD3,
    //     0x7C, 0x65, 0xAF, 0xB2, 0xA3, 0xAA, 0x41, 0xA3, 0x63, 0x61, 0x6C, 0x67, 0x65, 0x52, 0x53, 0x32,
    //     0x35, 0x36, 0x61, 0x6E, 0x59, 0x01, 0x00, 0xDB, 0x07, 0x0E, 0x48, 0xF7, 0x52, 0x81, 0xA9, 0x82,
    //     0x8D, 0x46, 0xAD, 0x81, 0xBE, 0xE2, 0x78, 0x27, 0x97, 0x6C, 0xF1, 0x85, 0x50, 0x5D, 0xC1, 0x72,
    //     0x77, 0x7B, 0xFF, 0x80, 0xE1, 0x58, 0xC3, 0x32, 0x72, 0xB1, 0x34, 0x0E, 0xAB, 0xA2, 0xDD, 0x3F,
    //     0xD9, 0xB8, 0x3E, 0xEA, 0x73, 0xF2, 0x80, 0x7C, 0x9F, 0xAE, 0x2A, 0x4E, 0xC5, 0x46, 0xEA, 0x23,
    //     0x0B, 0xFA, 0xB3, 0xC3, 0xB4, 0x17, 0x4B, 0x27, 0xFB, 0x07, 0xF6, 0x85, 0x66, 0x9D, 0x4A, 0xF0,
    //     0x40, 0xB1, 0x11, 0x40, 0xC7, 0x5C, 0xDF, 0x72, 0x1E, 0xA2, 0x1E, 0xB7, 0xE3, 0x3C, 0x99, 0xE2,
    //     0x1C, 0xF5, 0x6F, 0x02, 0x7D, 0xFD, 0x54, 0x05, 0x79, 0x31, 0xE3, 0x72, 0xDB, 0x72, 0x48, 0x5A,
    //     0xB9, 0x31, 0x97, 0x93, 0xB2, 0x1C, 0x4B, 0x5B, 0xAA, 0x89, 0x29, 0xC5, 0x97, 0x7C, 0x54, 0x8C,
    //     0x88, 0xE3, 0x06, 0x01, 0x27, 0x4F, 0x83, 0x31, 0xD6, 0x3C, 0xC4, 0x73, 0x85, 0x8B, 0x07, 0xAE,
    //     0x3E, 0x19, 0x67, 0x8B, 0x1D, 0xDF, 0xE0, 0x69, 0x96, 0xCA, 0x23, 0x78, 0xA8, 0xA9, 0xFC, 0xEB,
    //     0x6F, 0xCC, 0x46, 0xBC, 0xD6, 0x05, 0x3A, 0xC5, 0xED, 0xAD, 0x25, 0x86, 0x26, 0x54, 0xBB, 0x29,
    //     0xE7, 0xA7, 0x23, 0xD6, 0x76, 0xA2, 0xA3, 0xB6, 0x38, 0xC3, 0xF4, 0x92, 0xDC, 0x09, 0x68, 0x2C,
    //     0x04, 0x60, 0x5D, 0xD6, 0xB6, 0x30, 0x78, 0x6F, 0x96, 0x7D, 0x09, 0xCE, 0x40, 0x40, 0xC5, 0xBB,
    //     0x78, 0xF2, 0x2C, 0xD7, 0x33, 0x2B, 0x79, 0x17, 0x43, 0x9C, 0xDE, 0x2C, 0x32, 0xB0, 0x38, 0xCE,
    //     0x2C, 0x86, 0xFF, 0x0E, 0xD5, 0xEA, 0x7F, 0xF9, 0xFA, 0xA9, 0xFB, 0xA9, 0xCD, 0xF0, 0x5A, 0x69,
    //     0x3A, 0x9F, 0x4E, 0xAD, 0xCE, 0xCB, 0xF5, 0x7B, 0xF3, 0xED, 0x0B, 0x3D, 0x32, 0xE8, 0x46, 0xF5,
    //     0x7B, 0xF3, 0x48, 0x48, 0xF3, 0xFC, 0xED, 0x61, 0x65, 0x43, 0x01, 0x00, 0x01
    //     ]).buffer;

    // assertion
    var sigBuf = new Uint8Array([
        0x07, 0x4E, 0xFE, 0x3E, 0x49, 0x14, 0xFC, 0x58, 0x14, 0x09, 0xE0, 0x49, 0xE7, 0x6D, 0x92, 0xC7,
        0x1B, 0x58, 0xFF, 0x03, 0x39, 0x9B, 0xF7, 0x3A, 0xFE, 0x54, 0x1C, 0x59, 0x0F, 0x63, 0xE7, 0x05,
        0x52, 0xEB, 0x6F, 0x3A, 0x8E, 0x42, 0xFD, 0x44, 0x59, 0x86, 0xAB, 0x46, 0x30, 0x05, 0x49, 0xC8,
        0xAE, 0x1C, 0xD6, 0x0F, 0x79, 0x95, 0xFB, 0x82, 0x91, 0xF9, 0xC4, 0x5B, 0x2C, 0xE4, 0x78, 0xC8,
        0xAA, 0x1E, 0xD2, 0x51, 0xAD, 0x54, 0x66, 0x43, 0xA0, 0x5F, 0xE0, 0x5D, 0x75, 0x14, 0xE1, 0x1E,
        0x9C, 0x59, 0xAE, 0xD3, 0x2F, 0xB4, 0x8B, 0x97, 0x1E, 0x25, 0xE1, 0xEF, 0x87, 0xFE, 0x8D, 0x71,
        0x80, 0x2F, 0x79, 0x65, 0xB5, 0x45, 0x04, 0xB8, 0xF6, 0xB9, 0x5B, 0x7E, 0x9A, 0xBE, 0x9C, 0x90,
        0x46, 0xAF, 0xD1, 0xB1, 0x32, 0xF9, 0xDF, 0x56, 0x5A, 0x5C, 0x2A, 0xA5, 0xB6, 0xF0, 0x28, 0x82,
        0x9C, 0xE3, 0x2A, 0xE2, 0xEB, 0xF0, 0x0E, 0xC2, 0x6C, 0x36, 0xC0, 0x80, 0xA3, 0x0E, 0xD2, 0x62,
        0xC9, 0xD8, 0xFF, 0x58, 0x76, 0x3B, 0x57, 0x6A, 0x97, 0xCB, 0xF4, 0x28, 0xBD, 0xF0, 0xAF, 0xB9,
        0xA5, 0xEB, 0xCB, 0x14, 0x4C, 0x30, 0xB0, 0x76, 0x05, 0x55, 0x29, 0x8E, 0xF8, 0x6A, 0xD6, 0xF5,
        0x1C, 0x98, 0x90, 0xA6, 0xBE, 0xF8, 0x42, 0xEA, 0xFC, 0xE8, 0x9F, 0xAD, 0xA9, 0x9F, 0x35, 0xD8,
        0xA0, 0xE6, 0x21, 0xCF, 0x63, 0x75, 0x96, 0x24, 0xAE, 0xBC, 0xED, 0x6F, 0xC7, 0x2C, 0xAA, 0xD4,
        0xBF, 0x2A, 0xA7, 0xB6, 0x64, 0xA7, 0xBC, 0x2E, 0x34, 0x54, 0xFD, 0xED, 0x58, 0x51, 0xEA, 0x53,
        0x61, 0x77, 0x1B, 0xB7, 0x14, 0xA0, 0x7D, 0x77, 0xB6, 0x8F, 0xD7, 0x58, 0x9D, 0x8F, 0x76, 0x71,
        0x4C, 0xF1, 0xCB, 0xA3, 0xD1, 0x07, 0xCF, 0x03, 0x45, 0x7E, 0xAC, 0x4E, 0x1A, 0xDB, 0xDE, 0xD4,

    ]).buffer;
    var authnrData = new Uint8Array([
        0x49, 0x96, 0x0D, 0xE5, 0x88, 0x0E, 0x8C, 0x68, 0x74, 0x34, 0x17, 0x0F, 0x64, 0x76, 0x60, 0x5B,
        0x8F, 0xE4, 0xAE, 0xB9, 0xA2, 0x86, 0x32, 0xC7, 0x99, 0x5C, 0xF3, 0xBA, 0x83, 0x1D, 0x97, 0x63,
        0x01, 0x00, 0x00, 0x00, 0x01,
    ]).buffer;

    var clientDataBuf = h.clientDataJsonBuf;
    var fs = new Fido2Lib({
        serverDomain: "example.com"
    });
    var jwk2pem = require('pem-jwk').jwk2pem;
    var pem = jwk2pem({
        alg: "RS256",
        kty: "RSA",
        n: n,
        e: e
    });

    // fs.attestationDataToPem({
    //     alg: "RS256",
    //     n: n,
    //     e: e
    // });
    printHex("n", n);
    printHex("e", e);
    it("blah", function() {
        assert(fs.validateSignature(sigBuf, "RS256", pem, authnrData, clientDataBuf), "sig failed");
    });
});

// TODO: remove this debug code
function printHex(msg, buf) {
    // if the buffer was a TypedArray (e.g. Uint8Array), grab its buffer and use that
    if (ArrayBuffer.isView(buf) && buf.buffer instanceof ArrayBuffer) {
        buf = buf.buffer;
    }

    // check the arguments
    if ((typeof msg != "string") ||
        (typeof buf != "object")) {
        console.log("Bad args to printHex");
        return;
    }
    if (!(buf instanceof ArrayBuffer)) {
        console.log("Attempted printHex with non-ArrayBuffer:", buf);
        return;
    }
    // print the buffer as a 16 byte long hex string
    var arr = new Uint8Array(buf);
    var len = buf.byteLength;
    var i, str = "";
    console.log(msg);
    for (i = 0; i < len; i++) {
        var hexch = arr[i].toString(16);
        hexch = (hexch.length == 1) ? ("0" + hexch) : hexch;
        str += hexch.toUpperCase() + " ";
        if (i && !((i + 1) % 16)) {
            console.log(str);
            str = "";
        }
    }
    // print the remaining bytes
    if ((i) % 16) {
        console.log(str);
    }
}

/* JSHINT */
/* globals beforeEach */